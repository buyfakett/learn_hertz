// Code generated by hertz generator.

package main

import (
	"context"
	"embed"
	"fmt"
	"hertz_demo/biz/dal"
	"hertz_demo/biz/mw"
	"hertz_demo/utils/config"
	"hertz_demo/utils/logger"
	"log"
	"os/signal"
	"syscall"
	"time"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/network/standard"
)

//go:embed config/default.yaml
var defaultConfigContent []byte

//go:embed static/*
var staticFS embed.FS

func main() {
	config.InitConfig(defaultConfigContent)
	logger.InitLog(config.Cfg.Server.LogLevel)
	dal.Init()
	port := fmt.Sprintf(":%d", config.Cfg.Server.Port)
	h := server.Default(
		server.WithHostPorts(port),
		server.WithMaxRequestBodySize(20<<20),
		server.WithTransport(standard.NewTransporter),
	)

	// 排除鉴权的接口路径
	excludedPaths := []string{"/api/user/login", "/api/user/add"}
	// 注册鉴权中间件
	h.Use(mw.JWTAuthMiddleware(excludedPaths))
	// 注册静态文件中间件
	h.Use(mw.StaticFileMiddleware(staticFS))

	register(h)

	// 捕获 Ctrl+C / kill 等退出信号
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	go func() {
		if err := h.Run(); err != nil {
			log.Fatalf("服务启动失败: %v", err)
		}
	}()

	<-ctx.Done()

	// 控制优雅退出的超时时间，0.5秒就退出
	shutdownCtx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)
	defer cancel()
	if err := h.Shutdown(shutdownCtx); err != nil {
		log.Printf("关闭报错: %v", err)
	}
}
