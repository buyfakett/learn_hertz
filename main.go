// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/network/standard"
	//"github.com/hertz-contrib/swagger"
	//"github.com/hertz-contrib/swagger/example/basic/docs"
	//swaggerFiles "github.com/swaggo/files"
	"hertz_demo/config"
	"log"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	// The default listening port is 8888.
	// You can modify it with server.WithHostPorts().
	config.InitConfig()
	port := fmt.Sprintf(":%d", config.Cfg.Server.Port)
	h := server.Default(
		server.WithHostPorts(port),
		server.WithMaxRequestBodySize(20<<20),
		server.WithTransport(standard.NewTransporter),
	)

	//url := swagger.URL("http://localhost:8888/swagger/doc.json")
	//h.GET("/swagger/*any", swagger.WrapHandler(swaggerFiles.Handler, url))

	register(h)

	// 捕获 Ctrl+C / kill 等退出信号
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	go func() {
		if err := h.Run(); err != nil {
			log.Fatalf("服务启动失败: %v", err)
		}
	}()

	<-ctx.Done()

	// 控制优雅退出的超时时间，0.5秒就退出
	shutdownCtx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)
	defer cancel()
	if err := h.Shutdown(shutdownCtx); err != nil {
		log.Printf("关闭报错: %v", err)
	}
}
