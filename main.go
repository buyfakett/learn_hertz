// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/network/standard"
	"hertz_demo/dal"
	"hertz_demo/utils/config"
	"hertz_demo/utils/logger"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"syscall"
	"time"
)

func main() {
	// The default listening port is 8888.
	// You can modify it with server.WithHostPorts().
	config.InitConfig()
	logger.InitLog(config.Cfg.Server.LogLevel)
	dal.Init()
	port := fmt.Sprintf(":%d", config.Cfg.Server.Port)
	h := server.Default(
		server.WithHostPorts(port),
		server.WithMaxRequestBodySize(20<<20),
		server.WithTransport(standard.NewTransporter),
	)

	//url := swagger.URL("http://localhost:8888/swagger/doc.json")
	//h.GET("/swagger/*any", swagger.WrapHandler(swaggerFiles.Handler, url))

	// 静态文件服务，匹配所有路径
	h.GET("/*filepath", func(c context.Context, ctx *app.RequestContext) {
		filePath := ctx.Param("filepath")

		// 默认访问根路径，重定向到 index.html
		if filePath == "/" || filePath == "" {
			filePath = "/index.html"
		}

		// 拼接本地文件路径
		fullPath := filepath.Join("./static", filePath)

		// 判断文件是否存在
		if _, err := os.Stat(fullPath); os.IsNotExist(err) {
			hlog.Warnf("文件不存在: %s", fullPath)
			ctx.String(http.StatusNotFound, "404 not found")
			return
		}

		// 返回文件
		ctx.File(fullPath)
	})

	register(h)

	// 捕获 Ctrl+C / kill 等退出信号
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	go func() {
		if err := h.Run(); err != nil {
			log.Fatalf("服务启动失败: %v", err)
		}
	}()

	<-ctx.Done()

	// 控制优雅退出的超时时间，0.5秒就退出
	shutdownCtx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)
	defer cancel()
	if err := h.Shutdown(shutdownCtx); err != nil {
		log.Printf("关闭报错: %v", err)
	}
}
