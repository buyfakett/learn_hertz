syntax = "proto3";

// 该文件定义了用户相关的 Protobuf 消息和服务

package basic.user;

import "common/api.proto";
import "common/code.proto";

option go_package = "basic/user";

message CreateUserReq {
  string username = 1 [
    (api.body) = "username",
    (api.form) = "username",
    (api.vd) = "(len($) > 0 && len($) < 255)"
  ];  // 必传字段（proto3 默认规则）

  string password = 2 [
    (api.body) = "password",
    (api.form) = "password",
    (api.vd) = "(len($) > 0 && len($) < 255)"
  ];  // 必传字段

  optional string email = 3 [
    (api.body) = "email",
    (api.form) = "email",
    (api.vd) = "($ == nil || (len($) > 0 && len($) < 255))"
  ];  // 可选字段

  optional int64 age = 4 [
    (api.body) = "age",
    (api.form) = "age",
    (api.vd) = "($ == nil || $ > 0)"
  ];  // 可选字段
}

// 删除用户请求消息
message DeleteUserReq {
  string user_id = 1 [
    (api.body) = "user_id",
    (api.form) = "user_id",
    (api.vd) = "(len($) > 0)"
  ];  // 必传字段
}

// 更新用户请求消息
message UpdateUserReq {
  string username = 1 [
    (api.body) = "username",
    (api.form) = "username",
    (api.vd) = "(len($) > 0 && len($) < 255)"
  ];  // 必传字段（proto3 默认规则）

  string password = 2 [
    (api.body) = "password",
    (api.form) = "password",
    (api.vd) = "(len($) > 0 && len($) < 255)"
  ];  // 必传字段

  optional string email = 3 [
    (api.body) = "email",
    (api.form) = "email",
    (api.vd) = "(len($) > 0 && len($) < 255)"
  ];  // 可选字段（可传可不传）

  optional int64 age = 4 [
    (api.body) = "age",
    (api.form) = "age",
    (api.vd) = "$ > 0"
  ];  // 可选字段（可传可不传）
}


message CommonUserResp{
  Code code = 1;
  string msg = 2;
}

// 用户登录请求消息
message LoginUserReq {
  string Username = 1 [
    (api.body) = "username",
    (api.form) = "username",
    (api.vd) = "(len($) > 0)"
  ];  // 必传字段

  string Password = 2 [
    (api.body) = "password",
    (api.form) = "password",
    (api.vd) = "(len($) > 0)"
  ];
}

message UserLoginResp {
  Code code = 1;
  string msg = 2;
  UserLoginData data = 3;
}

message UserLoginData {
  string token = 1;
}

// 用户处理服务
service UserHandler {
  rpc CreateUser(CreateUserReq) returns(CommonUserResp) {
      option (api.post) = "/api/user/add";
  }

  rpc DeleteUser(DeleteUserReq) returns(CommonUserResp) {
    option (api.post) = "/api/user/delete/:user_id";
  }

  rpc UpdateUser(UpdateUserReq) returns(CommonUserResp) {
    option (api.post) = "/api/user/update/:user_id";
  }

  rpc UserLogin(LoginUserReq) returns(UserLoginResp) {
    option (api.post) = "/api/user/login";
  }
}

