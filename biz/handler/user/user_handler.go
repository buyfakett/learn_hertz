// Code generated by hertz generator.

package user

import (
	"context"
	"hertz_demo/biz/dal"
	"hertz_demo/biz/dbmodel"
	user "hertz_demo/biz/model/basic/user"
	"hertz_demo/biz/model/common"
	"hertz_demo/utils"
	"hertz_demo/utils/config"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateUser .
// @router /api/user/add [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.CreateUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.CommonUserResp)

	// 先检查用户名是否已存在
	exist, err := dal.IsUsernameExists(req.Username)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &user.CommonUserResp{
			Code: common.Code_DBErr,
			Msg:  "检查用户名失败: " + err.Error(),
		})
		return
	}
	if exist {
		c.JSON(consts.StatusBadRequest, &user.CommonUserResp{
			Code: common.Code_AlreadyExists,
			Msg:  "该用户已存在",
		})
		return
	}

	u := &dbmodel.User{
		Username: req.Username,
		Password: utils.MD5(req.Password),
		Email:    req.Email,
	}

	if err = dal.CreateUser([]*dbmodel.User{u}); err != nil {
		c.JSON(consts.StatusInternalServerError, &user.CommonUserResp{Code: common.Code_DBErr, Msg: "用户新建失败: " + err.Error()})
		return
	}

	resp.Code = common.Code_Success
	resp.Msg = "新建用户成功"

	c.JSON(consts.StatusOK, resp)
}

// DeleteUser .
// @router /api/user/delete/:user_id [POST]
func DeleteUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DeleteUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.CommonUserResp)

	tokenUsername, _ := utils.GetUsernameFromContext(c)
	if tokenUsername != config.Cfg.Admin.Username {
		c.JSON(consts.StatusUnauthorized, &user.CommonUserResp{Code: common.Code_Err, Msg: "非管理员账号没有权限"})
		return
	}

	userId, _ := strconv.Atoi(req.UserId)

	if err = dal.DeleteUser(userId); err != nil {
		c.JSON(consts.StatusInternalServerError, &user.CommonUserResp{Code: common.Code_DBErr, Msg: "删除用户失败: " + err.Error()})
		return
	}
	resp.Code = common.Code_Success
	resp.Msg = "用户" + req.UserId + "删除成功"

	c.JSON(consts.StatusOK, resp)
}

// UpdateUser .
// @router /api/user/update/:user_id [POST]
func UpdateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.CommonUserResp)

	userId, _ := strconv.Atoi(req.UserId)

	// 获取用户信息
	userData, err := dal.GetUserByID(userId)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &user.CommonUserResp{
			Code: common.Code_DBErr,
			Msg:  "数据库查询错误: " + err.Error(),
		})
		return
	}
	if userData == nil {
		c.JSON(consts.StatusInternalServerError, &user.CommonUserResp{
			Code: common.Code_DBErr,
			Msg:  "用户未找到",
		})
		return
	}

	tokenUsername, _ := utils.GetUsernameFromContext(c)
	if tokenUsername != userData.Username {
		c.JSON(consts.StatusUnauthorized, &user.CommonUserResp{Code: common.Code_Err, Msg: "不能修改别人的账号"})
		return
	}

	if userData.Username == config.Cfg.Admin.Username {
		if userData.Username != config.Cfg.Admin.Username {
			c.JSON(consts.StatusBadRequest, &user.CommonUserResp{
				Code: common.Code_Err,
				Msg:  "管理员用户不能修改用户名",
			})
			return
		}
	}

	// 更新用户名或密码等其他字段
	if req.Username != nil {
		userData.Username = *req.Username
		// 先检查用户名是否已存在
		exist, err := dal.IsUsernameExists(*req.Username)
		if err != nil {
			c.JSON(consts.StatusInternalServerError, &user.CommonUserResp{
				Code: common.Code_DBErr,
				Msg:  "检查用户名失败: " + err.Error(),
			})
			return
		}
		if exist {
			c.JSON(consts.StatusBadRequest, &user.CommonUserResp{
				Code: common.Code_AlreadyExists,
				Msg:  "该用户已存在",
			})
			return
		}
	}
	// 更新字段（只有不为 nil 才会更新）
	if req.Password != nil {
		userData.Password = utils.MD5(*req.Password)
	}

	if req.Email != nil {
		userData.Email = req.Email
	}

	// 方法保存数据
	err = dal.UpdateUser(userData)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &user.CommonUserResp{
			Code: common.Code_DBErr,
			Msg:  "更新用户信息失败: " + err.Error(),
		})
		return
	}

	// 返回成功响应
	resp.Code = common.Code_Success
	resp.Msg = "用户信息更新成功"
	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /api/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserLoginResp)

	userData, err := dal.UserLogin(req.Username)
	if err != nil {
		c.JSON(consts.StatusUnauthorized, &user.UserLoginResp{Code: common.Code_DBErr, Msg: err.Error()})
		return
	}

	if userData.Password != utils.MD5(req.Password) {
		c.JSON(consts.StatusUnauthorized, &user.UserLoginResp{Code: common.Code_PasswordErr, Msg: "密码错误"})
		return
	}
	token, _ := utils.GenerateToken(req.Username, req.Password)

	resp.Code = common.Code_Success
	resp.Msg = "登录成功"
	resp.Data = &user.UserLoginData{
		Token: token,
	}

	c.JSON(consts.StatusOK, resp)
}
